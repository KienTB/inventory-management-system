<?php

/**
 * Laravel UI Translation Automation Script
 * Scans Blade templates and auto-translates to Vietnamese
 */

class UITranslator
{
    private $translations = [];
    private $processedFiles = 0;

    public function run()
    {
        echo "üîÑ Starting UI Translation Automation...\n\n";

        // Scan all Blade files
        $this->scanBladeFiles();

        // Generate translation file
        $this->generateTranslationFile();

        // Apply translations to all files
        $this->applyTranslations();

        echo "\n‚úÖ Translation completed!\n";
        echo "üìä Processed {$this->processedFiles} files\n";
        echo "üåê Generated " . count($this->translations) . " translation keys\n";
    }

    private function scanBladeFiles()
    {
        $bladeFiles = $this->getAllBladeFiles();

        foreach ($bladeFiles as $file) {
            echo "üìÑ Scanning: " . basename($file) . "\n";
            $content = file_get_contents($file);

            // Extract strings that need translation
            $patterns = [
                // Text in quotes: "Hello World"
                '/(["\'])(.*?)\1/',

                // Blade directives with text
                '/@lang\s*\(\s*[\'"]([^\'"]+)[\'"]\s*\)/',

                // HTML attributes with text
                '/(title|placeholder|alt|value)=["\']([^"\']+)["\']/',

                // Form labels and buttons
                '/>([^<]+)</',

                // Vue/Alpine directives
                '/x-text=["\']([^"\']+)["\']/',
                '/:placeholder=["\']([^"\']+)["\']/',
            ];

            foreach ($patterns as $pattern) {
                if (preg_match_all($pattern, $content, $matches, PREG_SET_ORDER)) {
                    foreach ($matches as $match) {
                        $text = trim($match[count($match) - 1]);
                        if ($this->isTranslatable($text)) {
                            $key = $this->generateKey($text);
                            $this->translations[$key] = $this->translateToVietnamese($text);
                        }
                    }
                }
            }

            $this->processedFiles++;
        }
    }

    private function getAllBladeFiles()
    {
        $files = [];
        $directories = [
            'resources/views',
            'resources/views/auth',
            'resources/views/categories',
            'resources/views/components',
            'resources/views/customers',
            'resources/views/layouts',
            'resources/views/livewire',
            'resources/views/orders',
            'resources/views/products',
            'resources/views/profile',
            'resources/views/purchases',
            'resources/views/quotations',
            'resources/views/suppliers',
            'resources/views/units',
            'resources/views/users',
        ];

        foreach ($directories as $dir) {
            if (is_dir($dir)) {
                $iterator = new RecursiveIteratorIterator(
                    new RecursiveDirectoryIterator($dir)
                );

                foreach ($iterator as $file) {
                    if ($file->isFile() && $file->getExtension() === 'php') {
                        $files[] = $file->getPathname();
                    }
                }
            }
        }

        return $files;
    }

    private function isTranslatable($text)
    {
        // Skip if too short, contains only symbols, or is already a translation key
        return strlen($text) > 2
            && !preg_match('/^[0-9\s\W]+$/', $text)
            && !preg_match('/^ui\./', $text)
            && !preg_match('/^auth\./', $text)
            && !preg_match('/^validation\./', $text);
    }

    private function generateKey($text)
    {
        // Create a simple key from the text
        $key = strtolower($text);
        $key = preg_replace('/[^a-z0-9\s]/', '', $key);
        $key = preg_replace('/\s+/', '_', trim($key));
        $key = substr($key, 0, 50); // Limit length

        // Ensure uniqueness
        $originalKey = $key;
        $counter = 1;
        while (isset($this->translations[$key])) {
            $key = $originalKey . '_' . $counter;
            $counter++;
        }

        return $key;
    }

    private function translateToVietnamese($text)
    {
        // Simple translation mapping (expand as needed)
        $translations = [
            'Dashboard' => 'B·∫£ng ƒëi·ªÅu khi·ªÉn',
            'Products' => 'S·∫£n ph·∫©m',
            'Orders' => 'ƒê∆°n h√†ng',
            'Customers' => 'Kh√°ch h√†ng',
            'Suppliers' => 'Nh√† cung c·∫•p',
            'Categories' => 'Danh m·ª•c',
            'Units' => 'ƒê∆°n v·ªã',
            'Users' => 'Ng∆∞·ªùi d√πng',
            'Settings' => 'C√†i ƒë·∫∑t',
            'Profile' => 'H·ªì s∆°',
            'Login' => 'ƒêƒÉng nh·∫≠p',
            'Register' => 'ƒêƒÉng k√Ω',
            'Logout' => 'ƒêƒÉng xu·∫•t',
            'Name' => 'T√™n',
            'Email' => 'Email',
            'Phone' => 'S·ªë ƒëi·ªán tho·∫°i',
            'Address' => 'ƒê·ªãa ch·ªâ',
            'Description' => 'M√¥ t·∫£',
            'Price' => 'Gi√°',
            'Quantity' => 'S·ªë l∆∞·ª£ng',
            'Total' => 'T·ªïng c·ªông',
            'Subtotal' => 'T·ªïng t·∫°m t√≠nh',
            'Tax' => 'Thu·∫ø',
            'Discount' => 'Gi·∫£m gi√°',
            'Shipping' => 'Ph√≠ giao h√†ng',
            'Status' => 'Tr·∫°ng th√°i',
            'Date' => 'Ng√†y',
            'Action' => 'Thao t√°c',
            'Create' => 'T·∫°o',
            'Edit' => 'S·ª≠a',
            'Delete' => 'X√≥a',
            'Save' => 'L∆∞u',
            'Cancel' => 'H·ªßy',
            'Update' => 'C·∫≠p nh·∫≠t',
            'Search' => 'T√¨m ki·∫øm',
            'Filter' => 'L·ªçc',
            'Export' => 'Xu·∫•t',
            'Import' => 'Nh·∫≠p',
            'Download' => 'T·∫£i xu·ªëng',
            'Upload' => 'T·∫£i l√™n',
            'Loading' => 'ƒêang t·∫£i',
            'No data' => 'Kh√¥ng c√≥ d·ªØ li·ªáu',
            'No results' => 'Kh√¥ng c√≥ k·∫øt qu·∫£',
            'Confirm delete' => 'X√°c nh·∫≠n x√≥a',
            'Success' => 'Th√†nh c√¥ng',
            'Error' => 'L·ªói',
            'Warning' => 'C·∫£nh b√°o',
            'Info' => 'Th√¥ng tin',
            'Please select' => 'Vui l√≤ng ch·ªçn',
            'Please enter' => 'Vui l√≤ng nh·∫≠p',
            'Required' => 'B·∫Øt bu·ªôc',
            'Optional' => 'T√πy ch·ªçn',
        ];

        return $translations[$text] ?? $this->autoTranslate($text);
    }

    private function autoTranslate($text)
    {
        // For demo purposes, return Vietnamese equivalent
        // In production, you'd use a proper translation service
        $vietnameseWords = [
            'product' => 's·∫£n ph·∫©m',
            'order' => 'ƒë∆°n h√†ng',
            'customer' => 'kh√°ch h√†ng',
            'supplier' => 'nh√† cung c·∫•p',
            'category' => 'danh m·ª•c',
            'unit' => 'ƒë∆°n v·ªã',
            'user' => 'ng∆∞·ªùi d√πng',
            'setting' => 'c√†i ƒë·∫∑t',
            'profile' => 'h·ªì s∆°',
            'dashboard' => 'b·∫£ng ƒëi·ªÅu khi·ªÉn',
            'create' => 't·∫°o',
            'edit' => 's·ª≠a',
            'delete' => 'x√≥a',
            'save' => 'l∆∞u',
            'cancel' => 'h·ªßy',
            'update' => 'c·∫≠p nh·∫≠t',
            'search' => 't√¨m ki·∫øm',
            'filter' => 'l·ªçc',
            'export' => 'xu·∫•t',
            'import' => 'nh·∫≠p',
            'download' => 't·∫£i xu·ªëng',
            'upload' => 't·∫£i l√™n',
            'loading' => 'ƒëang t·∫£i',
            'success' => 'th√†nh c√¥ng',
            'error' => 'l·ªói',
            'warning' => 'c·∫£nh b√°o',
            'info' => 'th√¥ng tin',
        ];

        $words = explode(' ', strtolower($text));
        $translated = [];

        foreach ($words as $word) {
            $translated[] = $vietnameseWords[$word] ?? $word;
        }

        return ucfirst(implode(' ', $translated));
    }

    private function generateTranslationFile()
    {
        $content = "<?php\n\nreturn [\n\n";

        foreach ($this->translations as $key => $value) {
            $content .= "    '{$key}' => '{$value}',\n";
        }

        $content .= "\n];\n";

        file_put_contents('resources/lang/vi/ui.php', $content);
        echo "üìù Generated translation file: resources/lang/vi/ui.php\n";
    }

    private function applyTranslations()
    {
        // For demo, we'll just show what would be replaced
        // In a real implementation, you'd do the actual replacements
        echo "üîÑ Would apply " . count($this->translations) . " translations to Blade files...\n";
    }
}

// Run the translator
$translator = new UITranslator();
$translator->run();

?>
